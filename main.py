import os
import logging
import json
import httpx
import base64
from fastapi import FastAPI, HTTPException, File, UploadFile, Form, Depends, Cookie, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, StreamingResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv
load_dotenv()
import asyncio
import io
import database

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ CORS
app = FastAPI(title="explAiner API", version="1.0.0")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏, css, js)
app.mount("/templates", StaticFiles(directory="templates"), name="templates")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ (HTML)
templates = Jinja2Templates(directory="templates")

# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ä–µ–Ω–¥–µ—Ä–∏—Ç HTML)
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("new.html", {"request": request})

# üîπ Health-check (Render –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ—Ç URL)
@app.get("/status")
async def status():
    return {"status": "ok", "service": "explAiner AI API"}

# üîπ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ HTML
@app.get("/app")
async def serve_app():
    return FileResponse("templates/new.html")

@app.get("/ui")
async def serve_ui():
    return FileResponse("templates/new.html")


class ChatRequest(BaseModel):
    message: str
    model: str = "gpt-4o"
    multilingual: bool = True
    factCheck: bool = True
    rag: Optional[Dict[str, Any]] = None
    user_id: Optional[int] = None
    chat_id: Optional[str] = None


class ChatMessage(BaseModel):
    role: str  # "user" –∏–ª–∏ "assistant"
    content: str
    timestamp: str
    mode: str = "general"


class UserRegister(BaseModel):
    username: str
    email: str
    password: str


class UserLogin(BaseModel):
    email: str
    password: str


class ChatHistory(BaseModel):
    id: str
    title: str
    messages: List[ChatMessage]
    created_at: str
    updated_at: str


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Groq API (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º)
GROQ_API_KEY = os.getenv("GROQ_API_KEY", "")


def load_chat_history() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(CHAT_HISTORY_FILE):
            with open(CHAT_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    return []


def save_chat_history(history: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open(CHAT_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")


def generate_chat_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —á–∞—Ç–∞"""
    return f"chat_{int(datetime.now().timestamp())}"


def generate_chat_title(query: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = query.replace('\n', ' ').strip()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
    if len(query) <= 50:
        return query
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
    sentence_end = None
    for end_char in ['.', '?', '!']:
        pos = query.find(end_char)
        if pos > 10 and pos <= 100:  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
            sentence_end = pos + 1
            break
    
    if sentence_end:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        return query[:sentence_end].strip()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
    for delimiter in [',', ';', ':', ' - ', ' –∏ ', ' –∏–ª–∏ ']:
        pos = query.find(delimiter)
        if pos > 15 and pos <= 70:  # –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
            return query[:pos].strip()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    words = query.split()
    title = ""
    for word in words:
        if len(title) + len(word) + 1 > 50:
            break
        title += word + " "
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
    if len(title.strip()) < 20:
        return query[:47] + "..."
        
    return title.strip()


async def call_groq(prompt: str, model: str = "gpt-4o", multilingual: bool = True, factCheck: bool = True) -> str:
    """–í—ã–∑–æ–≤ Groq API. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ–ª–±—ç–∫-–æ—Ç–≤–µ—Ç.

    –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GROQ_API_KEY.
    """
    if not GROQ_API_KEY:
        # –§–æ–ª–±—ç–∫: –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π LLM
        return generate_fallback_response(prompt)

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è explAiner
    system_prompt = "–¢—ã explAiner - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω multilingual). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    if factCheck:
        system_prompt += " –ü—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç—ã –∏ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ."

    try:
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "llama3-70b-8192" if model == "gpt-4o" else "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt},
            ],
            "temperature": 0.3,
            "max_tokens": 2000,
        }
        async with httpx.AsyncClient(timeout=60) as client:
            resp = await client.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=payload,
            )
        resp.raise_for_status()
        data = resp.json()
        content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        return content or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
    except Exception as e:
        logging.error(f"Groq API error: {e}")
        return generate_fallback_response(prompt)


def generate_fallback_response(prompt: str, mode: str = "general") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π LLM"""
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    if mode == "contract":
        if any(word in prompt.lower() for word in ["–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"]):
            return """üìã –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)

üîç –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω
‚Ä¢ –°—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏
‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω
2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ç–∫–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É

üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ GROQ_API_KEY"""
        
    elif mode == "legal":
        return """‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)

üìö –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
‚Ä¢ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–∏—Å—å–º–µ–Ω–Ω–æ
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —é—Ä–∏—Å—Ç–∞–º–∏

üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç
‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –≤–µ–¥–æ–º—Å—Ç–≤

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–∏—Ç–µ GROQ_API_KEY"""
        
    elif mode == "summary":
        return """üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)

üìã –ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —Å–ø–æ—Ä–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
‚Ä¢ –°—Ä–æ–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –í—ã–¥–µ–ª–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Ä–∏—Å–∫–∏ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è

üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ GROQ_API_KEY"""
    
    else:
        return f"""ü§ñ –û—Ç–≤–µ—Ç –ò–ò (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)

–í–∞—à –∑–∞–ø—Ä–æ—Å: {prompt[:100]}{'...' if len(prompt) > 100 else ''}

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò –ø–æ–¥–∫–ª—é—á–∏—Ç–µ GROQ_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

üîß –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:
1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.groq.com/
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: GROQ_API_KEY=–≤–∞—à_–∫–ª—é—á
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üìö –ü–æ–∫–∞ —á—Ç–æ —è —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""


@app.post("/api/chat")
async def chat_with_ai(request: ChatRequest):
    """–ß–∞—Ç —Å –ò–ò —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        if not request.message.strip():
            raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        answer = await call_groq(request.message, request.model, request.multilingual, request.factCheck)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if request.user_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π chat_id –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            chat_id = request.chat_id or generate_chat_id()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            chat_data = database.get_chat(request.user_id, chat_id)
            
            if chat_data["success"]:
                # –ß–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                messages = chat_data["chat"]["messages"]
                title = chat_data["chat"]["title"]
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                messages = []
                title = generate_chat_title(request.message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages.append({
                "role": "user",
                "content": request.message,
                "timestamp": datetime.now().isoformat()
            })
            
            messages.append({
                "role": "assistant",
                "content": answer,
                "timestamp": datetime.now().isoformat()
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            database.save_chat(request.user_id, chat_id, title, messages)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å chat_id
            return JSONResponse(content={
                "answer": answer,
                "chat_id": chat_id,
                "title": title
            })
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            history = load_chat_history()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            chat_id = generate_chat_id()
            new_chat = {
                "id": chat_id,
                "title": generate_chat_title(request.message),
                "messages": [],
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
            history.append(new_chat)
            current_chat = new_chat
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = {
                "role": "user",
                "content": request.message,
                "timestamp": datetime.now().isoformat()
            }
            current_chat["messages"].append(user_message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant_message = {
                "role": "assistant",
                "content": answer,
                "timestamp": datetime.now().isoformat()
            }
            current_chat["messages"].append(assistant_message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            current_chat["updated_at"] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            save_chat_history(history)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            return answer
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")


@app.get("/chats")
async def get_chat_history(user_id: Optional[int] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
    try:
        if user_id:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = database.get_user_chats(user_id)
            if result["success"]:
                return JSONResponse(content={"chats": result["chats"]})
            else:
                raise HTTPException(status_code=500, detail=result["message"])
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            history = load_chat_history()
            return JSONResponse(content={"chats": history})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")


@app.get("/chats/{chat_id}")
async def get_chat(chat_id: str, user_id: Optional[int] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ ID"""
    try:
        if user_id:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = database.get_chat(user_id, chat_id)
            if result["success"]:
                return JSONResponse(content=result["chat"])
            else:
                raise HTTPException(status_code=404, detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            history = load_chat_history()
            for chat in history:
                if chat["id"] == chat_id:
                    return JSONResponse(content=chat)
            raise HTTPException(status_code=404, detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}")


@app.delete("/chats/{chat_id}")
async def delete_chat(chat_id: str, user_id: Optional[int] = None):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
    try:
        if user_id:
            # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = database.delete_chat(user_id, chat_id)
            if result["success"]:
                return JSONResponse(content={"message": "–ß–∞—Ç —É–¥–∞–ª–µ–Ω", "chat_id": chat_id})
            else:
                raise HTTPException(status_code=404, detail=result["message"])
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —É–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            history = load_chat_history()
            history = [chat for chat in history if chat["id"] != chat_id]
            save_chat_history(history)
            return JSONResponse(content={"message": "–ß–∞—Ç —É–¥–∞–ª–µ–Ω", "chat_id": chat_id})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}")


@app.post("/chats/{chat_id}/title")
async def update_chat_title(chat_id: str, title: str, user_id: Optional[int] = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞"""
    try:
        if user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = database.update_chat_title(user_id, chat_id, title)
            if result["success"]:
                return JSONResponse(content={"message": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", "title": title})
            else:
                raise HTTPException(status_code=404, detail=result["message"])
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª–µ
            history = load_chat_history()
            for chat in history:
                if chat["id"] == chat_id:
                    chat["title"] = title
                    chat["updated_at"] = datetime.now().isoformat()
                    save_chat_history(history)
                    return JSONResponse(content={"message": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", "title": title})
            raise HTTPException(status_code=404, detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {str(e)}")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return JSONResponse(content={
        "status": "healthy",
        "groq_available": bool(GROQ_API_KEY),
        "service": "ExplAiner AI"
    })


@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        history = load_chat_history()
        total_chats = len(history)
        total_messages = sum(len(chat["messages"]) for chat in history)
        
        return JSONResponse(content={
            "service": "ExplAiner AI",
            "version": "1.0.0",
            "groq_configured": bool(GROQ_API_KEY),
            "modes_available": ["general", "contract", "legal", "summary"],
            "total_chats": total_chats,
            "total_messages": total_messages
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logging.info("ExplAiner AI —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    if not GROQ_API_KEY:
        logging.warning("GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
@app.post("/api/upload")
async def upload_file(file: UploadFile = File(...), encrypted: str = Form("0")):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("uploads", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = os.path.join("uploads", file.filename)
        with open(file_path, "wb") as f:
            content = await file.read()
            f.write(content)
        
        return JSONResponse(content={
            "status": "success",
            "filename": file.filename,
            "size": len(content),
            "encrypted": encrypted == "1"
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


class AudioRequest(BaseModel):
    text: str
    voice: Optional[str] = None


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ (–∑–∞–≥–ª—É—à–∫–∞)
@app.post("/api/audio")
async def generate_audio(request: AudioRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gTTS"""
    try:
        from gtts import gTTS
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
            temp_path = temp_file.name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é gTTS
        tts = gTTS(text=request.text, lang='ru' if not request.voice else 'en')
        tts.save(temp_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        def cleanup():
            try:
                os.unlink(temp_path)
            except:
                pass
                
        return FileResponse(
            temp_path, 
            media_type="audio/mpeg",
            background=cleanup
        )
    except ImportError:
        logging.warning("gTTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π MP3.")
        return FileResponse("templates/empty.mp3", media_type="audio/mpeg")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")


class VideoRequest(BaseModel):
    text: str
    avatar: Optional[str] = "none"
    voice: Optional[str] = None


class ComplianceRequest(BaseModel):
    text: str
    profiles: List[str] = ["GDPR"]


class ComplianceResponse(BaseModel):
    score: int
    issues: List[str]
    suggestions: List[str]


class CompareRequest(BaseModel):
    doc_a: str
    doc_b: str


class CompareResponse(BaseModel):
    diffs: List[Dict[str, Any]]
    summary: str


class WhatIfRequest(BaseModel):
    question: str
    context: Optional[str] = None


class WhatIfResponse(BaseModel):
    diagram: str
    explanation: str


class DocumentAnalysisRequest(BaseModel):
    document_id: str
    document_text: str
    analysis_type: str = "general"  # general, legal, risks


class DocumentAnalysisResponse(BaseModel):
    summary: str
    key_points: List[str]
    risks: Optional[List[str]] = None
    recommendations: Optional[List[str]] = None


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞)
@app.post("/api/video")
async def generate_video(request: VideoRequest):
    try:
        HEYGEN_API_KEY = os.getenv('HEYGEN_API_KEY')
        if not HEYGEN_API_KEY:
            raise ValueError("HeyGen API key not found")

        logging.info(f"Generating video with text: {request.text[:50]}...")

        url = "https://api.heygen.com/v1/video.generate"
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "x-api-key": HEYGEN_API_KEY
        }
        payload = {
            "test": True,
            "caption": False,
            "aspect_ratio": "16:9",
            "video_inputs": [
                {
                    "character": {
                        "type": "avatar",
                        "avatar_name": request.avatar or "Jessica-2k-20190523"  # Replace with your valid avatar name
                    },
                    "voice": {
                        "type": "text",
                        "input_text": request.text,
                        "voice_name": request.voice or "Sara-neutral"  # Replace with valid voice name
                    }
                }
            ]
        }

        async with httpx.AsyncClient() as client:
            resp = await client.post(url, headers=headers, json=payload)
            logging.info(f"Generation response status: {resp.status_code}")
            resp.raise_for_status()
            data = resp.json()
            logging.info(f"Generation data: {data}")
            video_id = data.get("data", {}).get("video_id")
            if not video_id:
                raise ValueError("No video_id in response")

            # Poll for status
            status_url = f"https://api.heygen.com/v1/video_status/{video_id}"
            attempts = 0
            max_attempts = 60  # 5 min
            while attempts < max_attempts:
                attempts += 1
                status_resp = await client.get(status_url, headers=headers)
                logging.info(f"Status check {attempts}: {status_resp.status_code}")
                status_resp.raise_for_status()
                status_data = status_resp.json()
                logging.info(f"Status data: {status_data}")
                status = status_data.get("data", {}).get("status")
                if status == "completed":
                    video_url = status_data.get("data", {}).get("video_url")
                    break
                elif status == "failed" or status == "error":
                    raise ValueError(f"Video generation failed: {status_data.get('data', {}).get('error_msg', 'Unknown error')}")
                await asyncio.sleep(5)

            if not video_url:
                raise ValueError("Video generation timed out")

            # Download video
            video_resp = await client.get(video_url)
            logging.info(f"Download response: {video_resp.status_code}")
            video_resp.raise_for_status()

            return StreamingResponse(io.BytesIO(video_resp.content), media_type="video/mp4")

    except Exception as e:
        logging.error(f"Video generation error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Video generation error: {str(e)}")


# –ö–æ–º–ø–ª–∞–µ–Ω—Å-—á–µ–∫–µ—Ä
@app.post("/api/compliance")
async def check_compliance(request: ComplianceRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º GDPR, CCPA –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    try:
        if not request.text or request.text.strip() == "":
            return JSONResponse(content={
                "score": 0,
                "issues": ["–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"],
                "suggestions": ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"]
            })
            
        text = request.text.lower()
        profiles = request.profiles
        issues = []
        suggestions = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è GDPR
        if "gdpr" in profiles:
            if not any(term in text for term in ["consent", "—Å–æ–≥–ª–∞—Å–∏–µ", "—Å–æ–≥–ª–∞—Å"]):
                issues.append("–ù–µ—Ç —è–≤–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (consent/contract).")
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Art.6 GDPR) –∏ —Ü–µ–ª–∏.")
                
            if any(term in text for term in ["third party", "third-party", "—Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º", "—Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü"]):
                issues.append("–£–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è DPA –∏ SCC –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–≥—Ä–∞–Ω–∏—á–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ.")
                suggestions.append("–ó–∞–∫–ª—é—á–∏—Ç–µ DPA —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Art.28).")
                
            if not any(term in text for term in ["retention", "—Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è"]):
                issues.append("–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                suggestions.append("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
                
            if not any(term in text for term in ["rights", "–ø—Ä–∞–≤–∞ —Å—É–±—ä–µ–∫—Ç–∞", "–ø—Ä–∞–≤–æ –Ω–∞ –¥–æ—Å—Ç—É–ø"]):
                issues.append("–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤ —Å—É–±—ä–µ–∫—Ç–∞ (–¥–æ—Å—Ç—É–ø, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–Ω–æ—Å).")
                suggestions.append("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∞ —Å—É–±—ä–µ–∫—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è CCPA
        if "ccpa" in profiles:
            if not any(term in text for term in ["california", "–∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è", "ccpa"]):
                issues.append("–ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è CCPA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏.")
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª –æ –ø—Ä–∞–≤–∞—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ CCPA.")
                
            if not any(term in text for term in ["opt-out", "–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è", "–æ—Ç–∫–∞–∑ –æ—Ç"]):
                issues.append("–ù–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –¥–∞–Ω–Ω—ã—Ö (Do Not Sell).")
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ö–∞–Ω–∏–∑–º Do Not Sell My Personal Information.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è 152-–§–ó (–†–æ—Å—Å–∏—è)
        if "152fz" in profiles:
            if not any(term in text for term in ["–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "—Å—É–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"]):
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó.")
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Å—É–±—ä–µ–∫—Ç–∞ –ü–î–Ω –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                
            if not any(term in text for term in ["—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É", "–æ—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è"]):
                issues.append("–ù–µ –æ–ø–∏—Å–∞–Ω –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è.")
                suggestions.append("–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω.")
        
        # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        score = max(0, 100 - len(issues)*15)  # –°–Ω–∏–∂–∞–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
        
        return JSONResponse(content={
            "score": score,
            "issues": issues,
            "suggestions": list(set(suggestions))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞: {str(e)}")


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@app.post("/api/compare")
async def compare_documents(request: CompareRequest):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏–π"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        # –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        import difflib
        
        doc_a = request.doc_a
        doc_b = request.doc_b
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º difflib –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        diff = difflib.ndiff(doc_a.splitlines(), doc_b.splitlines())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        diffs = []
        for line in diff:
            if line.startswith('+ '):
                diffs.append({'type': 'added', 'text': line[2:]})
            elif line.startswith('- '):
                diffs.append({'type': 'removed', 'text': line[2:]})
            elif line.startswith('? '):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                continue
            else:
                diffs.append({'type': 'unchanged', 'text': line[2:] if line.startswith('  ') else line})
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        added = len([d for d in diffs if d['type'] == 'added'])
        removed = len([d for d in diffs if d['type'] == 'removed'])
        total_changes = added + removed
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        summary = f"–ù–∞–π–¥–µ–Ω–æ {total_changes} –∏–∑–º–µ–Ω–µ–Ω–∏–π: {added} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, {removed} —É–¥–∞–ª–µ–Ω–∏–π."
        
        return JSONResponse(content={
            "diffs": diffs[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            "summary": summary
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")


# What-if —Å–∏–º—É–ª—è—Ç–æ—Ä
@app.post("/api/whatif")
async def generate_whatif(request: WhatIfRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid-–¥–∏–∞–≥—Ä–∞–º–º –¥–ª—è What-if —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    try:
        if not request.question or request.question.strip() == "":
            return JSONResponse(status_code=400, content={
                "error": "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                "diagram": "",
                "explanation": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if not request.context or request.context.strip() == "":
            return JSONResponse(content={
                "diagram": """flowchart TD
                A["What-If –°–∏–º—É–ª—è—Ç–æ—Ä"] --> B{{"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç"}}
                B --> C["–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç"]
                C --> D["–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è What-If —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"]
                D --> E["—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
                """,
                "explanation": "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è What-If —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not GROQ_API_KEY:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è what-if —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
            return JSONResponse(content={
                "diagram": """flowchart TD
                A["What-If –°–∏–º—É–ª—è—Ç–æ—Ä (–¥–µ–º–æ-—Ä–µ–∂–∏–º)"] --> B{{"–î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á"}}
                B --> C["–ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"]
                C --> D["–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏"]
                D --> E["–£–∫–∞–∂–∏—Ç–µ GROQ_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"]
                """,
                "explanation": "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è What-If —Å–∏–º—É–ª—è—Ç–æ—Ä–∞. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å GROQ_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            })
            
        question = request.question
        context = request.context or ""
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞
        diagram = ""
        explanation = ""
        
        # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if any(term in question.lower() for term in ["gdpr", "–ø–µ—Ä—Å–æ–Ω–∞–ª", "personal data", "–¥–∞–Ω–Ω—ã–µ"]):
            diagram = """flowchart TD
            A[–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö] --> B{–ï—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ?}
            B -->|Consent/Contract| C[–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–∏ –∏ –æ–±—ä–µ–º]
            B -->|–ù–µ—Ç| H[–ó–∞–ø—Ä–µ—Ç/–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å]
            C --> D{–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ï–≠–ó?}
            D -->|–î–∞| E[SCC/–ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å]
            D -->|–ù–µ—Ç| F[–õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞]
            C --> G[–ü—Ä–∞–≤–∞ —Å—É–±—ä–µ–∫—Ç–∞, —Å—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è]"""
            explanation = "–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å GDPR. –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è, –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–≥—Ä–∞–Ω–∏—á–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–∞–≤ —Å—É–±—ä–µ–∫—Ç–æ–≤."
            
        elif any(term in question.lower() for term in ["–Ω–∞—Ä—É—à", "breach", "–Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω", "non-compete", "–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]):
            diagram = """flowchart TD
            A[–ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞] --> B{–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞?}
            B -->|–î–∞| C[–ü–æ–ø—ã—Ç–∫–∞ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è]
            B -->|–ù–µ—Ç| D[–†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ/—à—Ç—Ä–∞—Ñ]
            C --> E{–°–æ–≥–ª–∞—Å–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ?}
            E -->|–î–∞| F[–î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ]
            E -->|–ù–µ—Ç| D
            D --> G[–°—É–¥–µ–±–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞]"""
            explanation = "–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞. –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –æ –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω—ã —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏, —Å—É–¥–µ–±–Ω—ã–µ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
            
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        elif any(term in question.lower() for term in ["–∫–æ–º–ø–∞–Ω–∏—è", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–∞–∫—Ü–∏–æ–Ω–µ—Ä", "—É—Å—Ç–∞–≤", "company", "corporate"]):
            diagram = """flowchart TD
            A[–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ] --> B{–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏–µ?}
            B -->|–°–æ–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤| C[–°–æ–∑—ã–≤ –∑–∞—Å–µ–¥–∞–Ω–∏—è]
            B -->|–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ| D[–°–æ–∑—ã–≤ –û–°–ê]
            B -->|–ù–µ—Ç| E[–†–µ—à–µ–Ω–∏–µ –∏—Å–ø. –æ—Ä–≥–∞–Ω–∞]
            C --> F[–ü—Ä–æ—Ç–æ–∫–æ–ª –°–î]
            D --> G[–ü—Ä–æ—Ç–æ–∫–æ–ª –û–°–ê]
            F --> H[–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]
            G --> H
            E --> H"""
            explanation = "–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –æ—Ä–≥–∞–Ω–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—à–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ä–≥–∞–Ω–∞."
            
        # –ù–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        elif any(term in question.lower() for term in ["–Ω–∞–ª–æ–≥", "tax", "–Ω–¥—Å", "–Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ"]):
            diagram = """flowchart TD
            A[–ù–∞–ª–æ–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π] --> B{–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏?}
            B -->|–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è| C[–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—á–µ—Ç]
            B -->|–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è| D[–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ BEPS]
            C --> E[–ù–∞–ª–æ–≥–æ–≤—ã–µ —Ä–∏—Å–∫–∏]
            D --> F{–ï—Å—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ?}
            F -->|–î–∞| G[–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –°–û–ò–î–ù]
            F -->|–ù–µ—Ç| H[–û–±—â–∏–π –ø–æ—Ä—è–¥–æ–∫]
            G --> I[–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å]
            H --> I
            E --> I"""
            explanation = "–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π. –î–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –æ–± –∏–∑–±–µ–∂–∞–Ω–∏–∏ –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è."
            
        # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        else:
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
            keywords = ["—Ä–∏—Å–∫", "—Å—Ä–æ–∫", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "—Å–∞–Ω–∫—Ü–∏—è", "—à—Ç—Ä–∞—Ñ", "—Å—É–¥", "–∞—Ä–±–∏—Ç—Ä–∞–∂", "—Å–ø–æ—Ä"]
            scenario = question[:40] + '...' if len(question) > 40 else question
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_type = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
            for word in ["–±–∏–∑–Ω–µ—Å", "–∫–æ–º–ø–∞–Ω–∏—è", "–ø—Ä–æ–¥–∞–∂–∏", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"]:
                if word in question.lower():
                    scenario_type = "–ë–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–π"
                    break
                    
            diagram = f"""flowchart TD
            A["{scenario_type}: {scenario}"] --> B{{–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤}}
            B -->|–í—ã—Å–æ–∫–∏–π| C[–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]
            B -->|–°—Ä–µ–¥–Ω–∏–π| D[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥]
            B -->|–ù–∏–∑–∫–∏–π| E[–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞]
            C --> F[–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è]
            C --> G[–ü–ª–∞–Ω —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤]
            D --> H[–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏]
            F --> I[–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è]
            G --> I
            H --> I
            E --> I"""
            
            explanation = f"–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è: '{question}'. –ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —É—Ä–æ–≤–Ω—è, —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."
        
        return JSONResponse(content={
            "diagram": diagram,
            "explanation": explanation
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ What-if –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ What-if –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}")


# –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@app.post("/api/analyze")
async def analyze_document(request: DocumentAnalysisRequest):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        document_text = request.document_text
        analysis_type = request.analysis_type
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        # –í –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        summary = "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {len(document_text.split())} —Å–ª–æ–≤ –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."
        key_points = [
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            "–£–∫–∞–∑–∞–Ω—ã —Å—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã",
            "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        ]
        risks = []
        recommendations = []
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if analysis_type == "legal":
            key_points.extend([
                "–ü—Ä–æ–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∏ —é—Ä–∏—Å–¥–∏–∫—Ü–∏—è",
                "–£–∫–∞–∑–∞–Ω –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–æ–≤"
            ])
        elif analysis_type == "risks":
            risks = [
                "–ù–µ—á–µ—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω",
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–µ—Ç–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏ —Ä–∞–±–æ—Ç",
                "–ù–µ –ø—Ä–æ–ø–∏—Å–∞–Ω –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞"
            ]
            recommendations = [
                "–£—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–µ–¥–µ–ª—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω",
                "–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏ —Ä–∞–±–æ—Ç",
                "–ü—Ä–æ–ø–∏—Å–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞"
            ]
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        text_lower = document_text.lower()
        if "gdpr" in text_lower or "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω" in text_lower:
            key_points.append("–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            if analysis_type == "risks":
                risks.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GDPR")
                recommendations.append("–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å-—á–µ–∫ –ø–æ GDPR")
        
        if "–Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω" in text_lower or "non-compete" in text_lower:
            key_points.append("–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏")
            if analysis_type == "risks":
                risks.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–π –æ –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É")
        
        return JSONResponse(content={
            "summary": summary,
            "key_points": key_points,
            "risks": risks,
            "recommendations": recommendations
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/api/register")
async def register(user: UserRegister):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = database.register_user(user.username, user.email, user.password)
        
        if result["success"]:
            return JSONResponse(content={
                "success": True,
                "user": {
                    "id": result["user_id"],
                    "username": result["username"],
                    "email": result["email"],
                    "created_at": result["created_at"]
                }
            })
        else:
            return JSONResponse(status_code=400, content={
                "success": False,
                "message": result["message"]
            })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/api/login")
async def login(user: UserLogin):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = database.login_user(user.email, user.password)
        
        if result["success"]:
            return JSONResponse(content={
                "success": True,
                "user": {
                    "id": result["user_id"],
                    "username": result["username"],
                    "email": result["email"],
                    "created_at": result["created_at"]
                }
            })
        else:
            return JSONResponse(status_code=401, content={
                "success": False,
                "message": result["message"]
            })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/api/user")
async def get_current_user(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        conn = sqlite3.connect(database.DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("SELECT id, username, email, created_at FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if not user:
            return JSONResponse(status_code=404, content={"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        return JSONResponse(content={
            "success": True,
            "user": {
                "id": user[0],
                "username": user[1],
                "email": user[2],
                "created_at": user[3]
            }
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)